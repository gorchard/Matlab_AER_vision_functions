classdef ndataset_events < base_events
    %NDATASET_EVENTS class, Events from N Datasets recordings by Garrick Orchard
    %   This is a subclass of base_events which provides additional
    %   useful functions specifically for handling and manipulating the N Dataset
    %   recordings generated by Garrick Orchard.
    
    properties (Constant)
        % timestamp units (microseconds), so timestamps can be multiplied by this
        % to obtain a value in seconds.
        TimeConst = 1e-6;
        
        SaccadeDuration = 105e3; %duration of each saccade in microseconds
        
        Saccade2EndTs = 2 * ndataset_events.SaccadeDuration; %timestamp for end of saccade 2
    end
    
    properties (SetAccess = private)
        isStabilized = 0; % 1 if stabilization has been applied to this
    end
    
    methods
        function td = ndataset_events(width, height, filename)
            % For N-MNIST, width and height should be 34x34.
            td@base_events(width, height);
            
            % TD = read_n_dataset(filename)
            % returns the Temporal Difference (TD) events from binary file for the
            % N-MNIST and N-Caltech101 datasets. See garrickorchard.com\datasets for
            % more info
            %
            % written by Garrick Orchard - July 2015
            eventData = fopen(filename);
            evtStream = fread(eventData);
            fclose(eventData);
            td.x    = evtStream(1:5:end)+1; %pixel x address, with first pixel having index 1
            td.y    = evtStream(2:5:end)+1; %pixel y address, with first pixel having index 1
            td.p    = bitshift(evtStream(3:5:end), -7)+1; %polarity, 1 means off, 2 means on
            td.ts   = bitshift(bitand(evtStream(3:5:end), 127), 16); %time in microseconds
            td.ts   = td.ts + bitshift(evtStream(4:5:end), 8);
            td.ts   = td.ts + evtStream(5:5:end);
            td.actualSize = numel(td.x);
        end
        
        function stabilize(td)
            % TD_stabilized = stabilize(TD)
            % Compensates for the image motion induced by egorotation of the ATIS
            % sensor during recording of the N-MNIST and N-Caltech101 datasets
            %
            % relies on some common Matlab AER functions which can be found at http://www.garrickorchard.com/code/matlab-AER-functions
            % written by Garrick Orchard - August 2015
            
            if ~td.isStabilized
                saccade_1_index = td.ts <= ndataset_events.SaccadeDuration;
                td.x(saccade_1_index) = td.x(saccade_1_index) - 3.5*td.ts(saccade_1_index)/ndataset_events.SaccadeDuration;
                td.y(saccade_1_index) = td.y(saccade_1_index) - 7*td.ts(saccade_1_index)/ndataset_events.SaccadeDuration;

                saccade_2_index = (td.ts>ndataset_events.SaccadeDuration) & (td.ts<=ndataset_events.Saccade2EndTs);
                td.x(saccade_2_index) = td.x(saccade_2_index) - 3.5 - 3.5*(td.ts(saccade_2_index)-ndataset_events.SaccadeDuration)/ndataset_events.SaccadeDuration;
                td.y(saccade_2_index) = td.y(saccade_2_index) - 7 + 7*(td.ts(saccade_2_index)-ndataset_events.SaccadeDuration)/ndataset_events.SaccadeDuration;

                saccade_3_index = (td.ts>ndataset_events.Saccade2EndTs);
                td.x(saccade_3_index) = td.x(saccade_3_index) - 7 + 7*(td.ts(saccade_3_index)-ndataset_events.Saccade2EndTs)/ndataset_events.SaccadeDuration;

                % TD.y remains unchaged because it is a horizontal saccade
                td.x = round(td.x);
                td.y = round(td.y);
                nulls = (td.x<1) | (td.y<1);
                td.remove_events(nulls);
                td.isStabilized = 1;
            end
        end
    end
end
